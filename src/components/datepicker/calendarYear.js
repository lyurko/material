(function() {
  'use strict';


  angular.module('material.components.datepicker')
      .directive('mdCalendarYear', mdCalendarYearDirective);


  /**
   * Private directive consumed by md-calendar. Having this directive lets the calender use
   * md-virtual-repeat and also cleanly separates the month DOM construction functions from
   * the rest of the calendar controller logic.
   */
  function mdCalendarYearDirective() {
    return {
      require: ['^mdCalendarYearView', 'mdCalendarYear'],
      scope: {offset: '=mdYearOffset'},
      controller: CalendarYearCtrl,
      controllerAs: 'mdYearCtrl',
      bindToController: true,
      link: function(scope, element, attrs, controllers) {
        var calendarYearCtrl = controllers[0];
        var yearCtrl = controllers[1];

        yearCtrl.calendarYearCtrl = calendarYearCtrl;
        yearCtrl.generateContent();

        // The virtual-repeat re-uses the same DOM elements, so there are only a limited number
        // of repeated items that are linked, and then those elements have their bindings updataed.
        // Since the months are not generated by bindings, we simply regenerate the entire thing
        // when the binding (offset) changes.
        scope.$watch(function() { return yearCtrl.offset; }, function(offset, oldOffset) {
          if (offset != oldOffset) {
            yearCtrl.generateContent();
          }
        });
      }
    };
  }

  /** Class applied to the cell for today. */
  var TODAY_CLASS = 'md-calendar-date-today';

  /** Class applied to the selected date cell/. */
  var SELECTED_DATE_CLASS = 'md-calendar-selected-date';

  /** Class applied to the focused date cell/. */
  var FOCUSED_DATE_CLASS = 'md-focus';

  /**
   * Controller for a single calendar month.
   * @ngInject @constructor
   */
  function CalendarYearCtrl($element, $$mdDateUtil, $mdDateLocale) {
    this.dateUtil = $$mdDateUtil;
    this.dateLocale = $mdDateLocale;
    this.$element = $element;
    this.calendarYearCtrl = null;

    /**
     * Number of months from the start of the month "items" that the currently rendered month
     * occurs. Set via angular data binding.
     * @type {number}
     */
    this.offset;

    /**
     * Date cell to focus after appending the month to the document.
     * @type {HTMLElement}
     */
    this.focusAfterAppend = null;
  }

  /** Generate and append the content for this year to the directive element. */
  CalendarYearCtrl.prototype.generateContent = function() {
    var calendarYearCtrl = this.calendarYearCtrl;
    var year = calendarYearCtrl.firstRenderableDate.getFullYear() + this.offset;

    this.$element.empty();
    this.$element.append(this.buildCalendarForYear(year));

    if (this.focusAfterAppend) {
      this.focusAfterAppend.classList.add(FOCUSED_DATE_CLASS);
      this.focusAfterAppend.focus();
      this.focusAfterAppend = null;
    }
  };

  /**
   * Creates a single cell to contain a date in the calendar with all appropriate
   * attributes and classes added. If a date is given, the cell content will be set
   * based on the date.
   * @param {number} opt_year Four-digit year.
   * @param {number} opt_month Zero-indexed month.
   * @returns {HTMLElement}
   */
  CalendarYearCtrl.prototype.buildMonthCell = function(year, month) {
    var calendarYearCtrl = this.calendarYearCtrl;

    // TODO(jelbourn): cloneNode is likely a faster way of doing this.
    var cell = this.buildBlankMonthCell();

    // Represent this month/year as a date.
    var firstOfMonth = new Date(year, month, 1);
    cell.setAttribute('aria-label', this.dateLocale.monthHeaderFormatter(firstOfMonth));
    //cell.id = calendarYearCtrl.getDateId(firstOfMonth);

    // Use `data-timestamp` attribute because IE10 does not support the `dataset` property.
    cell.setAttribute('data-timestamp', firstOfMonth.getTime());

    // TODO(jelourn): Doing these comparisons for class addition during generation might be slow.
    // It may be better to finish the construction and then query the node and add the class.
    if (this.dateUtil.isSameMonthAndYear(firstOfMonth, calendarYearCtrl.today)) {
      cell.classList.add(TODAY_CLASS);
    }

    if (this.dateUtil.isValidDate(calendarYearCtrl.selectedDate) &&
        this.dateUtil.isSameDay(firstOfMonth, calendarYearCtrl.selectedDate)) {
      cell.classList.add(SELECTED_DATE_CLASS);
      cell.setAttribute('aria-selected', 'true');
    }

    var cellText = this.dateLocale.shortMonths[month];

    //if (this.dateUtil.isDateWithinRange(opt_date,
        //this.calendarYearCtrl.minDate, this.calendarYearCtrl.maxDate)) {
      // Add a indicator for select, hover, and focus states.
      var selectionIndicator = document.createElement('span');
      cell.appendChild(selectionIndicator);
      selectionIndicator.classList.add('md-calendar-date-selection-indicator');
      selectionIndicator.textContent = cellText;

      cell.addEventListener('click', calendarYearCtrl.cellClickHandler);

      if (calendarYearCtrl.focusDate && this.dateUtil.isSameDay(firstOfMonth, calendarYearCtrl.focusDate)) {
        this.focusAfterAppend = cell;
      }
    //} else {
      //cell.classList.add('md-calendar-date-disabled');
      //cell.textContent = cellText;
    //}

    return cell;
  };

  CalendarYearCtrl.prototype.buildBlankMonthCell = function() {
    var cell = document.createElement('td');
    cell.tabIndex = -1;
    cell.classList.add('md-calendar-date');
    cell.setAttribute('role', 'gridcell');

    cell.setAttribute('tabindex', '-1');
    return cell;
  };

  /**
   * Builds a `tr` element for the calendar grid.
   * @param rowNumber The week number within the month.
   * @returns {HTMLElement}
   */
  CalendarYearCtrl.prototype.buildDateRow = function(rowNumber) {
    var row = document.createElement('tr');
    row.setAttribute('role', 'row');

    // Because of an NVDA bug (with Firefox), the row needs an aria-label in order
    // to prevent the entire row being read aloud when the user moves between rows.
    // See http://community.nvda-project.org/ticket/4643.
    row.setAttribute('aria-label', this.dateLocale.weekNumberFormatter(rowNumber));

    return row;
  };

  /**
   * Builds the <tbody> content for the given date's month.
   * @param {number} year Four-digit year.
   * @returns {DocumentFragment} A document fragment containing the <tr> elements.
   */
  CalendarYearCtrl.prototype.buildCalendarForYear = function(year) {
    // Store rows for the month in a document fragment so that we can append them all at once.
    var yearBody = document.createDocumentFragment();

    var monthCell, i;
    // First row contains label and Jan-Jun.
    var firstRow = document.createElement('tr');
    var labelCell = document.createElement('td');
    labelCell.className = 'md-calendar-month-label';
    labelCell.textContent = year;
    firstRow.appendChild(labelCell);

    for (i = 0; i < 6; i++) {
      firstRow.appendChild(this.buildMonthCell(year, i));
    }
    yearBody.appendChild(firstRow);

    // Second row contains a blank cell and Jul-Dec.
    var secondRow = document.createElement('tr');
    secondRow.appendChild(this.buildBlankMonthCell());
    for (i = 6; i < 12; i++) {
      secondRow.appendChild(this.buildMonthCell(year, i));
    }
    yearBody.appendChild(secondRow);

    return yearBody;
  };
})();
